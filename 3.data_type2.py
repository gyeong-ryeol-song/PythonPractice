# 문자열 자료형
# 문자열 변수를 초기화할 때 큰따옴표나 작은따옴표를 이용
# 전체 문자열을 큰따옴표로 구성하는 경우, 내부적으로 작은 따옴표를 포함 가능
# 전체 문자열을 작은 따옴표로 구성하는 경우, 내부적으로 큰따옴표를 포함 가능
# 백슬래쉬(\)를 사용하면, 큰따옴표나 작은따옴표를 원하는만큼 포함 가능
# ex)

data = "Hello World"
print(data)
data="Don't you know \"Python\"?"
print(data)

# 문자열 연산
# 문자열 변수에 덧셈(+)을 이용하면 문자열이 더해져서 연결
# 문자열 변수를 특정한 양의 정수와 곱하는 경우, 문자열이 그 값만큼 여러 번 더해짐
# 문자열에 대해서도 마찬가지로 인덱싱과 슬라이싱을 이용할 수 있음
# 단, 문자열은 특정 인덱스의 값을 변경할 수 없다

a="Hello"
b="World"
print(a + " " + b)

a= "String"
print(a*3)

a="ABCDE"
print(a[2:4])

# 튜플 자료형
# 한번 선언된 값을 변경 못함
# 리스트는 대괄호([])를 이용하지만, 튜플은 소괄호(())를 이용
# 튜플은 리스트에 비해 상대적으로 공간 효율적
#ex)
a=(1,2,3,4,5,6,7,8,9)
print(a[3])
print(a[1:4])

# 튜플을 사용하면 좋은 경우
# 서로 다른 성질의 데이터를 묶어서 관리해야 할 때
# 최단 경로 알고리즘에서는 (비용, 노드번호)의 형태로 튜플 자료형을 자주 사용
# 데이터의 나열을 해싱(Hashing)의 형태로 튜플 자료형을 자주 사용
# 튜플은 변경이 불가능하므로 리스트와 다르게 키 값으로 사용될 수 있음
# 리스트보다 메모리를 효율적으로 사용해야 할 때

# 사전 자료형
# 사전 자료형은 키(Key)와 값(Value)의 쌍을 데이터로 가지는 자료형
# 사전 자료형은 키와 값의 쌍을 데이터로 가지며,
# 원하는 '변경 불가능한 자료형'을 키로 사용할 수  있음
# 파이썬의 사전 자료형은 해시 테이블(Hash Table)을 이용하므로 데이터의 조회 및 수정에
# 있어서 O(1)의 시간에 처리할 수 있음
#ex)

data = dict()
data['사과'] = 'Apple'
data['바나나'] = 'Banana'
data['코코넛'] = 'Coconut'

print(data)

if '사과' in data:
    print("'사과'를 키로 가지는 데이터가 존재")

# 사전 자료형 관련 메서드
# 사전 자료형에서는 키와 값을 별도로 뽑아내기 위한 메서드를 지원
# 키 데이터만 뽑아서 리스트로 이용할 때는 keys() 함수를 이용
# 값 데이터만을 뽑아서 리스트로 이용할 때는 values() 함수를 이용
# ex)

key_list = data.keys()
value_list = data.values()
print(key_list)
print(value_list)

for key in key_list:
    print(data[key])

a = dict()
a['홍길동'] = 97
a['이순신'] = 98

b = {
    '홍길동' : 97,
    '이순신' : 98
}
print(b)
key_list= list(b.keys()) #keys()함수는 엄밀히 말하면 하나의 dict_keys의 객체로 반환되기 때문에 리스트형변환을 해줘야 함
print(key_list)

# 집합 자료형
# 집합은 중복을 허용하지 않고 순서가 없음
# 집합은 리스트 혹은 문자열을 이용해서 초기화할 수 있음, 이 때 set()함수를 사용
# 혹은 중괄호({})안에 각 원소를 콤마(,)를 기준으로 구분하여 삽입함으로써 초기화 가능
# 데이터의 조회 및 수정에 있어서 O(1)의 시간에 처리할 수 있음
#ex)
data = set([1,1,2,3,4,4,5])
print(data)

data = {1,1,2,3,4,4,5}
print(data)

# 집합 자료형의 연산
# 합집합(|), 교집합(&), 차집합(-) 제공
a = set([1,2,3,4,5])
b= set([3,4,5,6,7])

print(a|b)
print(a&b)
print(a-b)

# 집합 자료형 관련 함수
# add() : 새로운 원소 추가
# update([,]) : 새로운 원소 여러 개 추가
# remove() : 특정 값을 갖는 원소 제거

data = set([1,2,3])
print(data)

data.add(4)
print(data)

data.update([5,6])
print(data)

data.remove(3)
print(data)

# 사전 자료형과 집합 자료형의 특징
# 리스트나 튜플은 순서가 있기 때문에 인덱싱을 통해 자료형의 값을 얻을 수 있음
# 사전 자료형과 집합 자료형은 '순서가 없기 때문에' 인덱싱으로 값을 얻을 수 없음
# 사전의 키(Key) 혹은 집합의 원소를 이용해 O(1)의 시간 복잡도로 조회

